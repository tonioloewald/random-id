{"mappings":"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","sources":["src/index.js","src/random-id.js"],"sourcesContent":["export * from './random-id.js'\n","const { crypto } = globalThis\n\n/*\n  Polyfill for crypto.randomUUID, taken from here:\n  https://github.com/uuidjs/randomUUID/blob/main/randomUUID.js\n*/\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor (name, type, value) {\n    super(`${name} variable is not of type ${type} (value: '${value}')`)\n\n    this.code = 'ERR_INVALID_ARG_TYPE'\n  }\n}\n\n//\n// internal/validators\n//\n\nfunction validateBoolean (value, name) {\n  if (typeof value !== 'boolean') throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value)\n}\n\nfunction validateObject (value, name) {\n  if (value === null || Array.isArray(value) || typeof value !== 'object') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value)\n  }\n}\n\n//\n// crypto\n//\n\nconst randomFillSync = crypto.getRandomValues.bind(crypto)\n\n// Implements an RFC 4122 version 4 random UUID.\n// To improve performance, random data is generated in batches\n// large enough to cover kBatchSize UUID's at a time. The uuidData\n// and uuid buffers are reused. Each call to randomUUID() consumes\n// 16 bytes from the buffer.\n\nconst kHexDigits = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102]\n\nconst kBatchSize = 128\nlet uuidData\nlet uuidNotBuffered\nlet _uuid\nlet uuidBatch = 0\n\nfunction getBufferedUUID () {\n  if (uuidData === undefined) {\n    uuidData = new Uint8Array(16 * kBatchSize)\n  }\n\n  if (uuidBatch === 0) randomFillSync(uuidData)\n  uuidBatch = (uuidBatch + 1) % kBatchSize\n  return uuidData.slice(uuidBatch * 16, uuidBatch * 16 + 16)\n}\n\nfunction randomUUID (options) {\n  if (options !== undefined) validateObject(options, 'options')\n  const { disableEntropyCache = false } = { ...options }\n\n  validateBoolean(disableEntropyCache, 'options.disableEntropyCache')\n\n  if (_uuid === undefined) {\n    _uuid = new Uint8Array(36)\n    _uuid[8] = _uuid[13] = _uuid[18] = _uuid[23] = '-'.charCodeAt(0)\n    _uuid[14] = 52 // '4', identifies the _uuid version\n  }\n\n  let uuidBuf\n  if (!disableEntropyCache) {\n    uuidBuf = getBufferedUUID()\n  } else {\n    uuidBuf = uuidNotBuffered\n    if (uuidBuf === undefined) uuidBuf = uuidNotBuffered = new Uint8Array(16)\n    randomFillSync(uuidBuf)\n  }\n\n  // Variant byte: 10xxxxxx (variant 1)\n  uuidBuf[8] = (uuidBuf[8] & 0x3f) | 0x80\n\n  // This function is structured the way it is for performance.\n  // The _uuid buffer stores the serialization of the random\n  // bytes from uuidData.\n  // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  let n = 0\n  _uuid[0] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[1] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[2] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[3] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[4] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[5] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[6] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[7] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  _uuid[9] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[10] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[11] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[12] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  // 4, _uuid[14] is set already...\n  _uuid[15] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[16] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[17] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  _uuid[19] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[20] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[21] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[22] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  _uuid[24] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[25] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[26] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[27] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[28] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[29] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[30] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[31] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[32] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[33] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[34] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[35] = kHexDigits[uuidBuf[n] & 0xf]\n\n  return String.fromCharCode.apply(null, _uuid)\n}\n\nif (!crypto.randomUUID) {\n  crypto.randomUUID = randomUUID\n}\n\nexport const now36 = () => new Date(parseInt('1000000000', 36) + Date.now()).valueOf().toString(36).slice(1)\n\nexport const randId = (length, base = 36) => {\n  const squared = base * base\n  const r = new Uint32Array(Math.ceil(length / 2))\n  crypto.getRandomValues(r)\n  return [...r].map(bytes => (squared + bytes % squared).toString(base)).slice(1).join('').substr(-length)\n}\n\nexport const id = () => now36() + randId(11)\n\nexport const uuid = crypto.randomUUID.bind(crypto)\n\nexport default uuid\n"],"names":[],"version":3,"file":"module.js.map"}