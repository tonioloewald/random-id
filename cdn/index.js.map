{"mappings":"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","sources":["src/random-id.js"],"sourcesContent":["const { crypto } = globalThis\n\n/*\n  Polyfill for crypto.randomUUID, taken from here:\n  https://github.com/uuidjs/randomUUID/blob/main/randomUUID.js\n*/\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor (name, type, value) {\n    super(`${name} variable is not of type ${type} (value: '${value}')`)\n\n    this.code = 'ERR_INVALID_ARG_TYPE'\n  }\n}\n\n//\n// internal/validators\n//\n\nfunction validateBoolean (value, name) {\n  if (typeof value !== 'boolean') throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value)\n}\n\nfunction validateObject (value, name) {\n  if (value === null || Array.isArray(value) || typeof value !== 'object') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value)\n  }\n}\n\n//\n// crypto\n//\n\nconst randomFillSync = crypto.getRandomValues.bind(crypto)\n\n// Implements an RFC 4122 version 4 random UUID.\n// To improve performance, random data is generated in batches\n// large enough to cover kBatchSize UUID's at a time. The uuidData\n// and uuid buffers are reused. Each call to randomUUID() consumes\n// 16 bytes from the buffer.\n\nconst kHexDigits = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102]\n\nconst kBatchSize = 128\nlet uuidData\nlet uuidNotBuffered\nlet _uuid\nlet uuidBatch = 0\n\nfunction getBufferedUUID () {\n  if (uuidData === undefined) {\n    uuidData = new Uint8Array(16 * kBatchSize)\n  }\n\n  if (uuidBatch === 0) randomFillSync(uuidData)\n  uuidBatch = (uuidBatch + 1) % kBatchSize\n  return uuidData.slice(uuidBatch * 16, uuidBatch * 16 + 16)\n}\n\nfunction randomUUID (options) {\n  if (options !== undefined) validateObject(options, 'options')\n  const { disableEntropyCache = false } = { ...options }\n\n  validateBoolean(disableEntropyCache, 'options.disableEntropyCache')\n\n  if (_uuid === undefined) {\n    _uuid = new Uint8Array(36)\n    _uuid[8] = _uuid[13] = _uuid[18] = _uuid[23] = '-'.charCodeAt(0)\n    _uuid[14] = 52 // '4', identifies the _uuid version\n  }\n\n  let uuidBuf\n  if (!disableEntropyCache) {\n    uuidBuf = getBufferedUUID()\n  } else {\n    uuidBuf = uuidNotBuffered\n    if (uuidBuf === undefined) uuidBuf = uuidNotBuffered = new Uint8Array(16)\n    randomFillSync(uuidBuf)\n  }\n\n  // Variant byte: 10xxxxxx (variant 1)\n  uuidBuf[8] = (uuidBuf[8] & 0x3f) | 0x80\n\n  // This function is structured the way it is for performance.\n  // The _uuid buffer stores the serialization of the random\n  // bytes from uuidData.\n  // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  let n = 0\n  _uuid[0] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[1] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[2] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[3] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[4] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[5] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[6] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[7] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  _uuid[9] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[10] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[11] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[12] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  // 4, _uuid[14] is set already...\n  _uuid[15] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[16] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[17] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  _uuid[19] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[20] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[21] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[22] = kHexDigits[uuidBuf[n++] & 0xf]\n  // -\n  _uuid[24] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[25] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[26] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[27] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[28] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[29] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[30] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[31] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[32] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[33] = kHexDigits[uuidBuf[n++] & 0xf]\n  _uuid[34] = kHexDigits[uuidBuf[n] >> 4]\n  _uuid[35] = kHexDigits[uuidBuf[n] & 0xf]\n\n  return String.fromCharCode.apply(null, _uuid)\n}\n\nif (!crypto.randomUUID) {\n  crypto.randomUUID = randomUUID\n}\n\nexport const now36 = () => new Date(parseInt('1000000000', 36) + Date.now()).valueOf().toString(36).slice(1)\n\nexport const randId = (length, base = 36) => {\n  const squared = base * base\n  const r = new Uint32Array(Math.ceil(length / 2))\n  crypto.getRandomValues(r)\n  return [...r].map(bytes => (squared + bytes % squared).toString(base)).slice(1).join('').substr(-length)\n}\n\nexport const id = () => now36() + randId(11)\n\nexport const uuid = crypto.randomUUID.bind(crypto)\n\nexport default uuid\n"],"names":["crypto","$820e8ae6c943084b$var$crypto","globalThis","$820e8ae6c943084b$var$ERR_INVALID_ARG_TYPE","TypeError","constructor","name","type","value","super","this","code","$820e8ae6c943084b$var$randomFillSync","getRandomValues","bind","$820e8ae6c943084b$var$kHexDigits","$820e8ae6c943084b$var$kBatchSize","$820e8ae6c943084b$var$uuidData","$820e8ae6c943084b$var$uuidNotBuffered","$820e8ae6c943084b$var$_uuid","$820e8ae6c943084b$var$uuidBatch","randomUUID","options","undefined","Array","isArray","$820e8ae6c943084b$var$validateObject","disableEntropyCache","uuidBuf","$820e8ae6c943084b$var$validateBoolean","Uint8Array","charCodeAt","slice","n","String","fromCharCode","apply","$820e8ae6c943084b$export$5d7b9a9d7f7e6e8a","Date","parseInt","now","valueOf","toString","$820e8ae6c943084b$export$4332f11a4b07dc0b","length","base","squared","r","Uint32Array","Math","ceil","map","bytes","join","substr","$820e8ae6c943084b$export$d560c7e4a29451c2","$820e8ae6c943084b$export$31b40729666a4ae0","$820e8ae6c943084b$export$2e2bcd8739ae039"],"version":3,"file":"index.js.map"}